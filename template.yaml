AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: An AWS Serverless Application to generate PDF reports and send via email.


Resources:
  ReportBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: bearden-data-solutions-report-bucket
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            ExpirationInDays: 7
#  MyApi:
#    Type: AWS::Serverless::Api
#    Properties:
#      StageName: Prod
#      Auth:
#        ApiKeyRequired: true
#
#  MyUsagePlan:
#    Type: "AWS::ApiGateway::UsagePlan"
#    Properties:
#      ApiStages:
#        - ApiId:
#            Ref: "MyApi"
#          Stage: "Prod"
#      Description: "A usage plan for important customers"
#      Quota:
#        Limit: 5000
#        Offset: 0
#        Period: "MONTH"
#      Throttle:
#        BurstLimit: 200
#        RateLimit: 100
#
#  MyApiKey:
#    Type: "AWS::ApiGateway::ApiKey"
#    Properties:
#      Description: "My API Key"
#      Enabled: true
#      GenerateDistinctId: true
#      Name: "MyAPIKey"
#      StageKeys:
#        - RestApiId:
#            Ref: "MyApi"
#          StageName: "Prod"

#  GenerateReportFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      PackageType: Image
#      ImageConfig:
#        Command: [ "app.lambda_handler" ]
#      Timeout: 15
#      Events:
#        HttpPost:
#          Type: Api
#          Properties:
#            Path: /report
#            Method: post
#            RestApiId:
#              Ref: MyApi
#      Policies:
#        - Statement:
#          - Effect: Allow
#            Action:
#              - ses:SendEmail
#              - ses:SendRawEmail
#            Resource: "*"
#        - Statement: # New policy statement to allow ssm:GetParameter action
#          - Effect: Allow
#            Action:
#              - ssm:GetParameter
#            Resource: arn:aws:ssm:us-east-1:047672427450:parameter/ALPHAVANTAGE_API_KEY
#    Metadata:
#      Dockerfile: Dockerfile.report
#      DockerContext: .
#      DockerTag: v1

  DailySynopsisFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      ImageConfig:
        Command: [ "app.lambda_handler" ]
      Architectures: [x86_64]
      MemorySize: 2048  # Specify memory size here
      Timeout: 600
      Environment:
        Variables:
          OPENAI_API_KEY: !Sub '{{resolve:ssm:/OPENAI_API_KEY}}'
          SERPER_API_KEY: !Sub '{{resolve:ssm:/SERPER_API_KEY}}'
    Metadata:
      Dockerfile: Dockerfile.daily_synopsis
      DockerContext: .
      DockerTag: v1

  DailyReportFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      ImageConfig:
        Command: [ "app.lambda_handler" ]
      Architectures: [x86_64]
      MemorySize: 256  # Specify memory size here
      Timeout: 900
      Events:
        DailyTrigger:
          Type: Schedule
          Properties:
            Schedule: cron(15 14 ? * MON-FRI *)
      Environment:
        Variables:
          ALPHAVANTAGE_API_KEY: !Sub '{{resolve:ssm:/ALPHAVANTAGE_API_KEY}}'
          FINVIZ_API_KEY: !Sub '{{resolve:ssm:/FINVIZ_API_KEY}}'
          IAM_ACCESS_KEY_ID: !Sub '{{resolve:ssm:/IAM_ACCESS_KEY_ID}}'
          IAM_SECRET_ACCESS_KEY: !Sub '{{resolve:ssm:/IAM_SECRET_ACCESS_KEY}}'
          TDA_API_KEY: !Sub '{{resolve:ssm:/TDA_API_KEY}}'
          TDA_ACCOUNT_ID: !Sub '{{resolve:ssm:/TDA_ACCOUNT_ID}}'
          OPENAI_API_KEY: !Sub '{{resolve:ssm:/OPENAI_API_KEY}}'
          GOOGLE_API_KEY: !Sub '{{resolve:ssm:/GOOGLE_API_KEY}}'
          GOOGLE_CSE_ID: !Sub '{{resolve:ssm:/GOOGLE_CSE_ID}}'
          SERPER_API_KEY: !Sub '{{resolve:ssm:/SERPER_API_KEY}}'
          BUCKET_NAME: !Ref ReportBucket
          DAILY_SYNOPSIS_FUNCTION_NAME: !GetAtt DailySynopsisFunction.Arn
          MPLCONFIGDIR: "/tmp"
#      Role: !GetAtt DailyReportFunctionRole.Arn

      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - ses:SendEmail
                - ses:SendRawEmail
              Resource: "*"
        - Statement: # New policy statement to allow ssm:GetParameter action
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - arn:aws:ssm:us-east-1:047672427450:parameter/FROM_EMAIL
                - arn:aws:ssm:us-east-1:047672427450:parameter/TO_EMAILS
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
                - secretsmanager:PutSecretValue
              Resource: arn:aws:secretsmanager:us-east-1:047672427450:secret:AMERITRADE_TOKEN_JSON-*
        - Statement: # New policy statement to allow s3:PutObject action
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetObject
              Resource:
                - !Sub "arn:aws:s3:::${ReportBucket}/*"
        - Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource: !GetAtt DailySynopsisFunction.Arn

    Metadata:
      Dockerfile: Dockerfile.daily_report
      DockerContext: .
      DockerTag: v1

#  DailyReportFunctionRole:
#    Type: AWS::IAM::Role
#    Properties:
#      AssumeRolePolicyDocument:
#        Version: '2012-10-17'
#        Statement:
#          - Effect: Allow
#            Principal:
#              Service: [lambda.amazonaws.com]
#            Action: ['sts:AssumeRole']
#      Policies:
#        - PolicyName: DailyReportFunctionPolicy
#          PolicyDocument:
#            Version: '2012-10-17'
#            Statement:
#              - Effect: Allow
#                Action:
#                  - lambda:InvokeFunction
#                Resource: !GetAtt DailySynopsisFunction.Arn

#  UsagePlanKey:
#    Type: "AWS::ApiGateway::UsagePlanKey"
#    Properties:
#      KeyId:
#        Ref: "MyApiKey"
#      KeyType: "API_KEY"
#      UsagePlanId:
#        Ref: "MyUsagePlan"

Outputs:
#  ApiURL:
#    Description: "API endpoint URL for Prod stage"
#    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/report"
  ReportBucketName:
    Description: "Name of the bucket to store reports"
    Value: !Ref ReportBucket
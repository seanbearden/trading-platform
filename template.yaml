AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: An AWS Serverless Application to generate PDF reports and send via email.

Resources:
  PositionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Positions
      AttributeDefinitions:
        - AttributeName: symbol
          AttributeType: S
        - AttributeName: storedTimestamp
          AttributeType: S
        # Define additional attributes for GSIs if needed
      KeySchema:
        - AttributeName: symbol
          KeyType: HASH
        - AttributeName: storedTimestamp
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      # Define GSIs if needed

  CurrentBalancesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: CurrentBalances
      AttributeDefinitions:
        - AttributeName: accountId
          AttributeType: S
        - AttributeName: storedTimestamp
          AttributeType: S
        # Define additional attributes for GSIs if needed
      KeySchema:
        - AttributeName: accountId
          KeyType: HASH
        - AttributeName: storedTimestamp
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      # Define GSIs if needed

  PortfolioAlertFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      ImageConfig:
        Command: [ "app.lambda_handler" ]
      Architectures: [ x86_64 ]
      MemorySize: 128  # Specify memory size here
      Timeout: 60
      Environment:
        Variables:
          TDA_API_KEY: '{{resolve:ssm:/TDA_API_KEY}}'
          TDA_ACCOUNT_ID: '{{resolve:ssm:/TDA_ACCOUNT_ID}}'
          TELEGRAM_USER_ID: '{{resolve:ssm:/TELEGRAM_USER_ID}}'
          TELEGRAM_BOT_TOKEN: '{{resolve:ssm:/TELEGRAM_BOT_TOKEN}}'
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PositionsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref CurrentBalancesTable
        - Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:PutSecretValue
            Resource: arn:aws:secretsmanager:us-east-1:047672427450:secret:AMERITRADE_TOKEN_JSON-*
      Events:
        ScheduleEvent:
          Type: Schedule
          Properties:
            Schedule: cron(15 21 ? * MON-FRI *)

    Metadata:
      Dockerfile: Dockerfile.portfolio_alert
      DockerContext: .
      DockerTag: v1

  ReportBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: bearden-data-solutions-report-bucket
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            ExpirationInDays: 7

  DailySynopsisFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      ImageConfig:
        Command: ["app.lambda_handler"]
      Architectures: [x86_64]
      MemorySize: 2048  # Specify memory size here
      Timeout: 600
      Environment:
        Variables:
          OPENAI_API_KEY: '{{resolve:ssm:/OPENAI_API_KEY}}'
          SERPER_API_KEY: '{{resolve:ssm:/SERPER_API_KEY}}'
    Metadata:
      Dockerfile: Dockerfile.daily_synopsis
      DockerContext: .
      DockerTag: v1

  DailyReportFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      ImageConfig:
        Command: ["app.lambda_handler"]
      Architectures: [x86_64]
      MemorySize: 256  # Specify memory size here
      Timeout: 900
      Environment:
        Variables:
          ALPHAVANTAGE_API_KEY: '{{resolve:ssm:/ALPHAVANTAGE_API_KEY}}'
          FINVIZ_API_KEY: '{{resolve:ssm:/FINVIZ_API_KEY}}'
          IAM_ACCESS_KEY_ID: '{{resolve:ssm:/IAM_ACCESS_KEY_ID}}'
          IAM_SECRET_ACCESS_KEY: '{{resolve:ssm:/IAM_SECRET_ACCESS_KEY}}'
          TDA_API_KEY: '{{resolve:ssm:/TDA_API_KEY}}'
          TDA_ACCOUNT_ID: '{{resolve:ssm:/TDA_ACCOUNT_ID}}'
          OPENAI_API_KEY: '{{resolve:ssm:/OPENAI_API_KEY}}'
          GOOGLE_API_KEY: '{{resolve:ssm:/GOOGLE_API_KEY}}'
          GOOGLE_CSE_ID: '{{resolve:ssm:/GOOGLE_CSE_ID}}'
          SERPER_API_KEY: '{{resolve:ssm:/SERPER_API_KEY}}'
          BUCKET_NAME: !Ref ReportBucket
          MPLCONFIGDIR: "/tmp"
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - ses:SendEmail
                - ses:SendRawEmail
              Resource: "*"
        - Statement: # New policy statement to allow ssm:GetParameter action
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - arn:aws:ssm:us-east-1:047672427450:parameter/FROM_EMAIL
                - arn:aws:ssm:us-east-1:047672427450:parameter/TO_EMAILS
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
                - secretsmanager:PutSecretValue
              Resource: arn:aws:secretsmanager:us-east-1:047672427450:secret:AMERITRADE_TOKEN_JSON-*
        - Statement: # New policy statement to allow s3:PutObject action
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetObject
              Resource:
                - !Sub "arn:aws:s3:::${ReportBucket}/*"
    Metadata:
      Dockerfile: Dockerfile.daily_report
      DockerContext: .
      DockerTag: v1

  ReportGenerationStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      DefinitionString: !Sub >
        {
          "Comment": "A Step Function to run Daily Synopsis and Report Functions",
          "StartAt": "RunParallel",
          "States": {
            "RunParallel": {
              "Type": "Parallel",
              "Branches": [
                {
                  "StartAt": "RunDailySynopsis",
                  "States": {                
                    "RunDailySynopsis": {
                      "Type": "Task",
                      "Resource": "${DailySynopsisFunction.Arn}",
                      "Retry": [
                        {
                          "ErrorEquals": [
                            "States.TaskFailed", 
                            "Lambda.ServiceException", 
                            "Lambda.AWSLambdaException", 
                            "Lambda.SdkClientException"
                          ],
                          "IntervalSeconds": 2,
                          "MaxAttempts": 3,
                          "BackoffRate": 2.0
                        }
                      ],
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "RunPortfolioAlerts",
                  "States": { 
                    "RunPortfolioAlerts": {
                      "Type": "Task",
                      "Resource": "${PortfolioAlertFunction.Arn}",
                      "End": true
                    }
                  }
                }
              ],
              "Next": "RunDailyReport"
            },
            "RunDailyReport": {
              "Type": "Task",
              "Resource": "${DailyReportFunction.Arn}",
              "End": true
            }
          }
        }

      RoleArn: !GetAtt StepFunctionsExecutionRole.Arn

  StepFunctionsExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "states.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "LambdaInvokePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !GetAtt DailySynopsisFunction.Arn
                  - !GetAtt DailyReportFunction.Arn
                  - !GetAtt PortfolioAlertFunction.Arn

  StateMachineExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "events.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "StateMachineExecutionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "states:StartExecution"
                Resource: !Ref ReportGenerationStateMachine

  StateMachineTrigger:
    Type: "AWS::Events::Rule"
    Properties:
      ScheduleExpression: "cron(15 14 ? * MON-FRI *)"  # Adjust depending on daylight saving
      Targets:
        - Arn: !Ref ReportGenerationStateMachine
          Id: "StateMachineTrigger"
          RoleArn: !GetAtt StateMachineExecutionRole.Arn
      State: "ENABLED"

Outputs:
  ReportBucketName:
    Description: "Name of the bucket to store reports"
    Value: !Ref ReportBucket
  StateMachineArn:
    Description: "ARN of the Step Functions State Machine"
    Value: !Ref ReportGenerationStateMachine
